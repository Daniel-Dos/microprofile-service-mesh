// Copyright (c) 2018 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// Emily Jiang
//

= MicroProfile Config and Service Mesh

MicroProfile Config provides a solution to externalise the configuration. The default config sources includes environment varialbles, system properties and microprofile-config.properties on the classpath. 

The properties defined in Kubernetes config map automatically transforms to environment variables. 

[source, text]
----
kind: ConfigMap
apiVersion: v1
metadata:
  name: example-config
  namespace: default
data:
  example.property.1: hello
  example.property.2: world
----

Therefore, config properties specified in the config map are automatically injectable to the microservices via MicroProfile Config APIs.

[source, java]
----
@ApplicationScoped
public class Demo {

    //The property example.property.1 was defined in the configmap of Kubenetes
    @Inject
    @ConfigProperty(name="example.property.1") String myProp1;
    //The property example.property.1 was defined in the configmap of Kubenetes
    @Inject
    @ConfigProperty(name="example.property.2") String myProp2;
    public void echo() {
        System.out.println(myProp1 + myProp2);
    }
}
----
The above example demonstrates that MicroProfile Config complements to service mesh via Kubernetes and there is no conflict. 

